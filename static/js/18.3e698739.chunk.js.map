{"version":3,"sources":["utils/movies.js","components/Ribbon/index.js","components/Popular/ItemCard.js","assets/jss/movieByGenreStyles.js","components/PopularMoviesListing/index.js","components/PopularTvShowsListing/index.js","views/Main/Popular.js"],"names":["formatMovieUrl","uri","originalImageBaseUrl","convertArrayIntoArrayOfArrays","data","dataLimit","subArrayLength","result","slice","forEach","item","index","array","newArray","length","push","useStyles","makeStyles","theme","ribbon","position","right","top","zIndex","overflow","width","height","textAlign","fontSize","fontWeight","color","textTransform","lineHeight","transform","display","background","boxShadow","content","left","borderLeft","borderRight","borderBottom","borderTop","Ribbon","props","classes","className","children","simmilarLink","flexDirection","margin","textDecoration","posterWrapper","transition","palette","simmilarPoster","backgroundSize","backgroundRepeat","backgroundPosition","PopularItemCard","type","isFavorite","isWatchLater","to","id","style","backgroundImage","poster_path","direction","paddingTop","paddingBottom","paddingLeft","Typography","variant","sx","pt","date","Date","dayjs","format","renderDate","Rating","name","value","Math","floor","vote_average","readOnly","moviesByGenreStyles","movieBackground","filter","listingWrapper","backgroundColor","primary","dark","shadow","borderRadius","movieDetailsWrapper","mainMovieContainer","mainShadow","listItem","spacing","padding","poster","loadMoreButton","genre","marginRight","icon","marginBottom","genreText","clickableCard","cursor","cardActionButton","PopularMoviesListing","useState","loading","setLoading","loadingMore","setLoadingMore","dispatch","useDispatch","useSelector","state","movies","popularMovies","favorites","popularMoviesPage","useEffect","fetchData","then","res","Promise","rej","getPopularMovies","incrementPopularMoviesPage","setPopularMovies","results","catch","err","console","error","marginTop","Array","from","map","Skeleton","movie","find","fav","justifyContent","CustomButton","title","alignItems","CircularProgress","size","marginLeft","disabled","onClick","buttonClassName","PopularTvShowsListing","series","popularSeries","popularTvShowsPage","getPopularTvShows","incrementPopularTvShowsPage","setPopularSeries","serie","root","orange","tab","indicator","Popular","history","useHistory","listing","setListing","queryParams","QueryString","parse","location","search","ignoreQueryPrefix","list","includes","initListing","Helmet","xs","align","Tabs","onChange","event","val","centered","Tab","label","renderListing"],"mappings":"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","file":"static/js/18.3e698739.chunk.js","sourcesContent":["import { originalImageBaseUrl } from \"services/api\";\n\nexport const formatMovieUrl = uri => {\n  return `${originalImageBaseUrl}${uri}`;\n}\n\nexport const convertArrayIntoArrayOfArrays = (data, dataLimit = 18, subArrayLength = 3) => {\n  let result = [];\n  data.slice(0, dataLimit).forEach((item, index, array) => {\n    if (index % subArrayLength === 0 || index === 0) {\n      const newArray = array.slice(index, index + subArrayLength);\n      if (newArray.length) {\n        result.push(newArray);\n      }\n    }\n  });\n  return result;\n}\n","import { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  ribbon: {\n    position: 'absolute',\n    right: '-5px',\n    top: '-5px',\n    zIndex: '1',\n    overflow: 'hidden',\n    width: '75px',\n    height: '75px',\n    textAlign: 'right',\n    \"& > span\": {\n      fontSize: '10px',\n      fontWeight: 'bold',\n      color: '#FFF',\n      textTransform: 'uppercase',\n      textAlign: 'center',\n      lineHeight: '20px',\n      transform: 'rotate(45deg)',\n      width: '100px',\n      display: 'block',\n      background: '#F2AA4Cff',\n      boxShadow: '0 3px 10px -5px rgba(0, 0, 0, 1)',\n      position: 'absolute',\n      top: '19px',\n      right: '-21px',\n      \"&:before\": {\n        content: \"''\",\n        position: 'absolute',\n        left: '0px',\n        top: '100%',\n        zIndex: '-1',\n        borderLeft: '3px solid #F2AA4Cff',\n        borderRight: '3px solid transparent',\n        borderBottom: '3px solid transparent',\n        borderTop: '3px solid #F2AA4Cff'\n      },\n      \"&:after\": {\n        content: \"''\",\n        position: 'absolute',\n        right: '0px',\n        top: '100%',\n        zIndex: '-1',\n        borderLeft: '3px solid transparent',\n        borderRight: '3px solid #F2AA4Cff',\n        borderBottom: '3px solid transparent',\n        borderTop: '3px solid #F2AA4Cff'\n      }\n    }\n  }\n}));\n\nexport default function Ribbon(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.ribbon}>\n      <span>{props.children}</span>\n    </div>\n  );\n}\n","import { Rating, Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { GridContainer } from 'components';\nimport Ribbon from 'components/Ribbon';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatMovieUrl } from 'utils/movies';\n\nconst useStyles = makeStyles(theme => ({\n  simmilarLink: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0 auto 1.75rem',\n    position: 'relative',\n    width: '250px',\n    height: '100%',\n    textDecoration: 'none'\n  },\n  posterWrapper: {\n    position: 'relative',\n    overflow: 'hidden',\n    \"& > $simmilarPoster\": {\n      transition: theme.palette.transition\n    },\n    \"&:hover > $simmilarPoster\": {\n      transform: 'scale(1.05)'\n    }\n  },\n  simmilarPoster: {\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    width: '250px',\n    height: '400px'\n  }\n}));\n\nexport default function PopularItemCard({ data, type = \"movie\", isFavorite, isWatchLater }) {\n  const classes = useStyles();\n\n  const renderDate = () => {\n    if (type === \"movie\") {\n      let date = data['release_date'] || new Date();\n      return dayjs(date).format(\"MMMM DD, YYYY\");\n    } else if (type === \"tv\") {\n      let date = data['first_air_date'] || new Date();\n      return dayjs(date).format(\"MMMM DD, YYYY\");\n    } else {\n      return dayjs().format(\"MMMM DD, YYYY\");\n    }\n  }\n\n  return (\n    <Link to={`/${type === \"movie\" ? \"movie\" : \"tv\"}/${data.id}`} className={classes.simmilarLink} key={data.id}>\n      {isFavorite && <Ribbon>Favorite</Ribbon>}\n      <div className={classes.posterWrapper}>\n        <div\n          style={{ backgroundImage: `url(${formatMovieUrl(data.poster_path)})` }}\n          className={classes.simmilarPoster} />\n      </div>\n      <GridContainer direction=\"column\" paddingTop={2} paddingBottom={2} paddingLeft={1}>\n        <Typography variant=\"h4\" color=\"textSecondary\" paddingTop={2}>{data[type === \"movie\" ? 'title' : 'name']}</Typography>\n        <Typography variant=\"subtitle1\" color=\"white\" paddingTop={2} sx={{ pt: .5 }}>\n          {renderDate()}\n        </Typography>\n        <Typography variant=\"subtitle2\" color=\"white\" paddingTop={2} sx={{ pt: .5 }}>\n          <Rating name=\"read-only\" value={Math.floor(data.vote_average) / 2 || 1} readOnly />\n        </Typography>\n      </GridContainer>\n    </Link>\n  );\n}\n","export const moviesByGenreStyles = theme => ({\n  movieBackground: {\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    height: '400px',\n    filter: 'blur(10px)'\n  },\n  listingWrapper: {\n    paddingTop: '1rem',\n    backgroundColor: theme.palette.primary.dark,\n    width: '70%',\n    margin: '-7.5rem 1rem 1rem',\n    zIndex: '15',\n    boxShadow: theme.palette.shadow,\n    borderRadius: '5px 5px 0 0'\n  },\n  movieDetailsWrapper: {\n    position: 'unset',\n    width: '75%',\n  },\n  mainMovieContainer: {\n    position: 'absolute',\n    width: '65%',\n    height: '100%'\n  },\n  mainShadow: {\n    zIndex: 99,\n    borderTop: '1px solid #34415b',\n    boxShadow: '0px 1px 20px 4px #202839'\n  },\n  listItem: {\n    overflow: 'hidden',\n    backgroundColor: '#252E42',\n    margin: theme.spacing(1, 0, 2.5),\n    padding: '0',\n    borderRadius: '10px 0 0 10px',\n    boxShadow: '2px 4px 10px 3px #202839'\n  },\n  poster: {\n    height: '300px',\n    width: '200px',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    transition: '.5s all ease'\n  },\n  posterWrapper: {\n    overflow: 'hidden',\n    margin: '0'\n  },\n  loadMoreButton: {\n    padding: theme.spacing(1, 3),\n    '& p': {\n      fontSize: '16px'\n    }\n  },\n  genre: {\n    marginRight: theme.spacing(1.5),\n    padding: theme.spacing(.25, 2),\n    borderRadius: '7px',\n    background: theme.palette.icon,\n    textDecoration: 'none',\n    marginBottom: '5px'\n  },\n  genreText: {\n    fontSize: '10px',\n    lineHeight: '17px',\n    fontWeight: 'bolder',\n    textDecoration: 'none',\n    textTransform: 'uppercase'\n  },\n  clickableCard: {\n    cursor: 'pointer',\n    '&:hover $poster': {\n      transform: 'scale(1.05)'\n    }\n  },\n  cardActionButton: {\n    fontSize: '15px',\n    marginRight: theme.spacing(1.5)\n  }\n});","import { CircularProgress, Skeleton } from '@mui/material';\nimport { GridItem } from 'components';\nimport { GridContainer } from 'components';\nimport CustomButton from 'components/CustomButton';\nimport PopularItemCard from 'components/Popular/ItemCard';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setPopularMovies, incrementPopularMoviesPage } from 'reduxToolkit/slices/movies';\nimport { getPopularMovies } from 'services/api';\nimport { moviesByGenreStyles } from 'assets/jss/movieByGenreStyles';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  ...moviesByGenreStyles(theme).loadMoreButton\n}));\n\nexport default function PopularMoviesListing() {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const dispatch = useDispatch();\n  const { popularMovies, favorites, popularMoviesPage } = useSelector(state => state.movies);\n\n  useEffect(() => {\n    if (!popularMovies.length) {\n      setLoading(true);\n      fetchData().then(res => {\n        setLoading(false);\n      });\n    }\n  }, [popularMovies]);\n\n  const fetchData = () => {\n    return new Promise((res, rej) => getPopularMovies(popularMoviesPage)\n      .then(result => {\n        dispatch(incrementPopularMoviesPage(1));\n        dispatch(setPopularMovies(result.data.results));\n        res();\n      })\n      .catch(err => console.error(err)));\n  }\n\n  const renderMovies = () => {\n    return popularMovies.filter(item => item.poster_path).map(movie => {\n      const isFavorite = favorites.find(fav => fav.id === movie.id);\n      return <PopularItemCard data={movie} isFavorite={isFavorite} key={movie.id} />;\n    });\n  }\n\n  const renderLoadingSpinner = () => {\n    return Array.from(Array(10)).map((item, index) =>\n      <Skeleton\n        width={250}\n        height={400}\n        key={index}\n        style={{\n          transform: 'unset',\n          margin: '0 auto 1.75rem'\n        }} />);\n  }\n\n  const fetchMoreMoviesHandler = () => {\n    setLoadingMore(true);\n    fetchData().then(res => {\n      setLoadingMore(false);\n    });\n  }\n\n  return (\n    <GridContainer marginTop={5}>\n      {loading || !popularMovies.length\n        ? renderLoadingSpinner()\n        : <>\n          {renderMovies()}\n\n          <GridContainer justifyContent=\"center\">\n            <GridItem marginBottom={1} marginTop={4}>\n              <CustomButton\n                title={\n                  loadingMore\n                    ? <GridContainer alignItems=\"center\">\n                      <>Load more</>\n                      <CircularProgress size={15} style={{ marginLeft: '.5rem' }} color=\"white\" />\n                    </GridContainer>\n                    : \"Load more\"\n                }\n                disabled={loadingMore}\n                onClick={fetchMoreMoviesHandler}\n                buttonClassName={classes.loadMoreButton} />\n            </GridItem>\n          </GridContainer>\n        </>}\n    </GridContainer>\n  );\n}\n","import { CircularProgress, Skeleton } from '@mui/material';\nimport { GridItem } from 'components';\nimport { GridContainer } from 'components';\nimport CustomButton from 'components/CustomButton';\nimport PopularItemCard from 'components/Popular/ItemCard';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { incrementPopularTvShowsPage, setPopularSeries } from 'reduxToolkit/slices/series';\nimport { getPopularTvShows } from 'services/api';\nimport { moviesByGenreStyles } from 'assets/jss/movieByGenreStyles';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  ...moviesByGenreStyles(theme).loadMoreButton\n}));\n\nexport default function PopularTvShowsListing() {\n  const classes = useStyles();\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const { popularSeries, favorites, popularTvShowsPage } = useSelector(state => state.series);\n\n  useEffect(() => {\n    if (!popularSeries.length) {\n      setLoading(true);\n      fetchData().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [popularSeries]);\n\n  const fetchData = () => {\n    return new Promise((res, rej) => getPopularTvShows(popularTvShowsPage)\n      .then(result => {\n        dispatch(incrementPopularTvShowsPage(1));\n        dispatch(setPopularSeries(result.data.results));\n        res();\n      })\n      .catch(err => console.error(err)));\n  }\n\n  const renderSeries = () => {\n    return popularSeries.filter(item => item.poster_path).map(serie => {\n      const isFavorite = favorites.find(fav => fav.id === serie.id);\n      return <PopularItemCard data={serie} isFavorite={isFavorite} type=\"tv\" key={serie.id} />;\n    });\n  }\n\n  const renderLoadingSpinner = () => {\n    return Array.from(Array(10)).map((item, index) =>\n      <Skeleton\n        width={250}\n        height={400}\n        key={index}\n        style={{\n          transform: 'unset',\n          margin: '0 auto 1.75rem'\n        }} />);\n  }\n\n  const fetchMoreSeriesHandler = () => {\n    setLoadingMore(true);\n    fetchData().then(() => {\n      setLoadingMore(false);\n    });\n  }\n\n  return (\n    <GridContainer marginTop={5}>\n      {loading || !popularSeries.length\n        ? renderLoadingSpinner()\n        : <>\n          {renderSeries()}\n\n          <GridContainer justifyContent=\"center\">\n            <GridItem marginBottom={1} marginTop={4}>\n              <CustomButton\n                title={\n                  loadingMore\n                    ? <GridContainer alignItems=\"center\">\n                      <>Load more</>\n                      <CircularProgress size={15} style={{ marginLeft: '.5rem' }} color=\"white\" />\n                    </GridContainer>\n                    : \"Load more\"\n                }\n                disabled={loadingMore}\n                onClick={fetchMoreSeriesHandler}\n                buttonClassName={classes.loadMoreButton} />\n            </GridItem>\n          </GridContainer>\n        </>}\n    </GridContainer>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Tab, Tabs, Typography } from '@mui/material';\nimport { GridContainer, GridItem } from 'components';\nimport PopularMoviesListing from 'components/PopularMoviesListing';\nimport PopularTvShowsListing from 'components/PopularTvShowsListing';\nimport { makeStyles } from '@mui/styles';\nimport { Helmet } from 'react-helmet';\nimport QueryString from 'query-string';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .Mui-selected\": {\n      color: theme.palette.orange\n    }\n  },\n  tab: {\n    color: 'white'\n  },\n  indicator: {\n    backgroundColor: theme.palette.orange\n  }\n}));\n\nexport default function Popular() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [listing, setListing] = useState(null);\n\n  useEffect(() => {\n    const queryParams = QueryString.parse(history.location.search, { ignoreQueryPrefix: true });\n\n    if (queryParams.list) {\n      if (!['movie', 'tv'].includes(queryParams.list)) {\n        return initListing();\n      }\n\n      const value = queryParams.list === \"movie\" ? 0 : 1;\n      setListing(value);\n    } else {\n      initListing();\n    }\n  }, [history]);\n\n  const initListing = () => {\n    history.push('/popular?list=movie');\n    setListing(0);\n  }\n\n  const renderListing = () => {\n    if (listing === null) return;\n\n    if (listing === 1) return <PopularTvShowsListing />;\n\n    return <PopularMoviesListing />;\n  }\n\n  const onChange = (event, val) => {\n    if (val === 0) {\n      history.push('/popular?list=movies');\n    } else {\n      history.push('/popular?list=tv');\n    }\n\n    setListing(val);\n  }\n\n  return (\n    <>\n      <Helmet><title>Popular {listing === 1 ? 'tv shows' : 'movies'}</title></Helmet>\n      <GridContainer justifyContent=\"center\" marginTop={3}>\n        <GridItem xs={12}>\n          <Typography variant='h2' align='center' color=\"orange\" marginBottom={1}>Popular</Typography>\n        </GridItem>\n        <GridItem xs={12}>\n          <Tabs\n            classes={{\n              root: classes.root,\n              indicator: classes.indicator\n            }}\n            value={listing || 0}\n            onChange={onChange}\n            centered>\n            {[\"Movies\", \"TV shows\"].map(item => <Tab className={classes.tab} label={item} key={item} />)}\n          </Tabs>\n        </GridItem>\n      </GridContainer>\n\n      {renderListing()}\n    </>\n  );\n}\n"],"sourceRoot":""}